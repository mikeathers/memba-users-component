name: Build/test/deployon:  workflow_dispatch:  push:env:  AWS_ACCOUNT_ID_DEV: 544312030237  AWS_ACCOUNT_ID_PROD: 635800996936permissions:  actions: read  checks: read  contents: read  deployments: read  id-token: write  issues: read  packages: read  pull-requests: read  repository-projects: read  security-events: read  statuses: readjobs:  run-quality-checks:    name: ðŸ“‹ Quality checks    runs-on: ubuntu-latest    steps:      - name: Checkout        uses: actions/checkout@v3      - name: Restore node_modules from cache        id: cache-node-modules        uses: actions/cache@v3        with:          path: node_modules          key: v1-${{ runner.os }}-${{ hashFiles('yarn.lock') }}      - name: Install NPM packages        if: steps.cache-node-modules.outputs.cache-hit != 'true'        run: yarn install --frozen-lockfile      - name: Prettier        run: yarn prettier      - name: Run linters        run: yarn lint      - name: Run type check        run: yarn tsc  run-unit-tests:    name: ðŸ§ª Unit tests    runs-on: ubuntu-latest    steps:      - name: Checkout        uses: actions/checkout@v3      - name: Restore node_modules from cache        id: cache-node-modules        uses: actions/cache@v3        with:          path: node_modules          key: v1-${{ runner.os }}-${{ hashFiles('yarn.lock') }}      - name: Install NPM packages        if: steps.cache-node-modules.outputs.cache-hit != 'true'        run: yarn install --frozen-lockfile      - name: Run unit tests        run: yarn test      - name: Upload test report artifacts        uses: actions/upload-artifact@v3        if: always()        with:          name: test-reports          path: build/reports  deploy-to-dev:    name: ðŸ›¶  Deploy to dev    needs:      - run-quality-checks      - run-unit-tests    runs-on: ubuntu-latest    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.event.ref == 'refs/heads/main') }}    steps:      - uses: actions/checkout@v3      - uses: actions/setup-node@v3.6.0        with:          node-version: '16'      - name: Restore node_modules from cache        id: cache-node-modules        uses: actions/cache@v3        with:          path: node_modules          key: v1-${{ runner.os }}-${{ hashFiles('yarn.lock') }}      - name: Install NPM packages        if: steps.cache-node-modules.outputs.cache-hit != 'true'        run: yarn install --frozen-lockfile      - name: Configure dev AWS credentials        uses: aws-actions/configure-aws-credentials@v2        with:          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID_DEV }}:role/infra-service-deployment          role-session-name: users-component-deploy-role          aws-region: eu-west-2      - name: CDK deploy        run: yarn cdk deploy --all --context stage=dev --outputs-file cdk-output.json --require-approval never  deploy-to-prod:    name: ðŸš¢  Deploy to prod    needs:      - run-quality-checks      - run-unit-tests    runs-on: ubuntu-latest    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.event.ref == 'refs/heads/main') }}    steps:      - uses: actions/checkout@v3      - uses: actions/setup-node@v3.6.0        with:          node-version: '16'      - name: Restore node_modules from cache        id: cache-node-modules        uses: actions/cache@v3        with:          path: node_modules          key: v1-${{ runner.os }}-${{ hashFiles('yarn.lock') }}      - name: Install NPM packages        if: steps.cache-node-modules.outputs.cache-hit != 'true'        run: yarn install --frozen-lockfile      - name: Configure prod AWS credentials        uses: aws-actions/configure-aws-credentials@v2        with:          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID_PROD }}:role/infra-service-deployment          role-session-name: users-component-deploy-role          aws-region: eu-west-2      - name: Deploy to prod stage        run: yarn cdk deploy --all --context stage=prod --outputs-file cdk-output.json --require-approval never